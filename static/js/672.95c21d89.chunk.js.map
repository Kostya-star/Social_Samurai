{"version":3,"file":"static/js/672.95c21d89.chunk.js","mappings":"8KACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,2B,mBCW5I,EATmB,SAACA,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,gBAAKC,UAAWC,EAAAA,OAAhB,UACE,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCAhC,EAJgB,SAACN,GACf,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,W,2DCuCrCC,GAAcC,EAAAA,EAAAA,GAAiB,IAW/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EATL,SAACX,GACtB,OACE,kBAAMa,SAAUb,EAAMc,aAAtB,WACA,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcF,KAAK,iBAAiBc,YAAY,uBADjG,KACwH,mBACxH,2CAOJ,EA3CgB,SAACpB,GAEf,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAUF,EAAME,QAAQC,KAAI,SAACC,GAAD,OAAQ,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBJ,GAAIuB,EAAEvB,IAAZuB,EAAEvB,OACrEwB,EAAWL,EAAMK,SAASF,KAAI,SAACG,GAAD,OAAQ,SAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAASL,GAAIyB,EAAEzB,IAASyB,EAAEzB,OACnEmB,EAAMO,eAM3B,OAAK5B,EAAM6B,QAGT,iBAAK1B,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SACKmB,KAGL,iBAAKpB,UAAWC,EAAAA,SAAhB,UACGsB,GAED,SAAChB,EAAD,CAAqBG,SAfP,SAACiB,GACnB9B,EAAM+B,YAAYD,EAAOF,0BAGD,SAAC,KAAD,CAAUvB,GAAI,Y,oBCJ1C,GAAe2B,E,QAAAA,KACbC,EAAAA,EAAAA,KAhBoB,SAACZ,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACY,GACxB,MAAO,CACLH,YAAa,SAACH,GACZM,GAASC,EAAAA,EAAAA,GAAmBP,SAQhCQ,EAAAA,EAFF,CAGEC,I,iJCpBEC,EAA6B,SAACjB,GAAD,MAAY,CAC3CQ,OAAQR,EAAMkB,KAAKV,SAGRO,EAAmB,SAACI,GAAe,IACxCC,EADuC,0IAE3C,WACE,OAAKC,KAAK1C,MAAM6B,QACT,SAACW,GAAD,UAAeE,KAAK1C,SADI,SAAC,KAAD,CAAUK,GAAG,eAHH,GACbsC,EAAAA,WAShC,OAFqCV,EAAAA,EAAAA,IAAQK,EAARL,CAAoCQ","sources":["webpack://fapp-13.06.22/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/WithAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4fRSk\",\"dialogsItems\":\"Dialogs_dialogsItems__QaYDL\",\"active\":\"Dialogs_active__c8PjB\",\"messages\":\"Dialogs_messages__NPIZ4\"};","import s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import s from \"./Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport React from \"react\";\r\nimport {updateNewMessageBodyCreator, sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from './../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator } from \"../../utils/validators\";\r\nimport { required } from './../../utils/validators';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogs = state.dialogs.map((d) => (<DialogItem name={d.name} key={d.id} id={d.id} />));\r\n  let messages = state.messages.map((m) => (<Message message={m.message} id={m.id} key={m.id} />));\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  if (!props.isAuth) return <Navigate to={'/login'} />;\r\n\r\n  return ( \r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n          {dialogs}\r\n      </div>\r\n\r\n      <div className={s.messages}>\r\n        {messages}\r\n\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n    <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageBody\" placeholder='enter your message'/> <br />\r\n    <button>send</button>\r\n  </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import {sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to='/login' />\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n  \r\n  return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","path","id","className","s","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogs","map","d","messages","m","newMessageBody","isAuth","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}